<!-- <script>
      $(document).ready(function() {
          const POS = {
              init() {
                  this.cacheDOM();
                  this.bindEvents();
                  this.initBarcodeScanner();
                  this.$searchInput.focus();
              },

              cacheDOM() {
                  this.$searchInput = $('#search-pos');
                  this.$productTableContainer = $('#productTableContainer-pos');
                  this.$selectedProductsTable = $('#selectedProducts-pos');
                  this.$receivedAmount = $('#receivedAmount');
              },

              bindEvents() {
                  this.$searchInput.on('input', this.debounce(this.handleSearch.bind(this), 300));
                  this.$productTableContainer.on('click', 'tbody tr', this.handleProductSelection.bind(this));
                  $(document).on('input', '.product-input', this.handleQuantityChange.bind(this));
                  $(document).on('click', '.increase-qty', (e) => this.handleQuantityAdjust($(e.currentTarget), 1));
                  $(document).on('click', '.decrease-qty', (e) => this.handleQuantityAdjust($(e.currentTarget), -1));
                  $(document).on('click', '.remove-row', (e) => this.removeRow($(e.currentTarget).closest('tr')));
                  this.$receivedAmount.on('input', this.updateSidebar.bind(this));
                  this.$selectedProductsTable.on('click', 'tbody tr', this.handleRowSelection.bind(this));
              },

              debounce(func, wait) {
                  let timeout;
                  return (...args) => {
                      clearTimeout(timeout);
                      timeout = setTimeout(() => func.apply(this, args), wait);
                  };
              },

              initBarcodeScanner() {
                  let scanBuffer = '';
                  let lastKeyTime = Date.now();
                  const scanCompleteDelay = 50; // Increased delay for more reliable scanning

                  $(document).on('keydown', (e) => {
                      const currentTime = Date.now();
                      if (e.key === 'Enter' && scanBuffer.length > 0) {
                          e.preventDefault();
                          this.handleBarcodeScan(scanBuffer);
                          scanBuffer = '';
                          return false;
                      }

                      if (currentTime - lastKeyTime > scanCompleteDelay) {
                          scanBuffer = '';
                      }

                      if (e.key.length === 1) {
                          scanBuffer += e.key;
                      }

                      lastKeyTime = currentTime;

                      // Allow manual input in the search field
                      if ($(e.target).is(this.$searchInput)) {
                          return true;
                      }

                      // Prevent keypress from affecting other inputs
                      if (scanBuffer.length > 1) {
                          e.preventDefault();
                          return false;
                      }
                  });
              },

              handleSearch() {
                  const inputValue = this.$searchInput.val().trim();
                  if (inputValue.length > 0) {
                      this.searchProducts(inputValue);
                  } else {
                      this.$productTableContainer.hide();
                  }
              },

              searchProducts(searchKey, page = 0, size = 5) {
                  if (!searchKey || searchKey.trim() === '') {
                      console.log('Empty search key, not performing search');
                      return;
                  }

                  $.ajax({
                      url: '/products/sales-data',
                      type: 'GET',
                      data: { searchKey, page, size },
                      success: (response) => {
                          if (response && response.trim() !== '') {
                              this.$productTableContainer.html(response).show();
                          } else {
                              this.$productTableContainer.html('<p>No products found.</p>').show();
                          }
                      },
                      error: (e) => {
                          console.log('Search error:', e);
                          this.$productTableContainer.html('<p>Error loading products.</p>').show();
                      }
                  });
              },

              handleProductSelection(event) {
                  event.preventDefault();
                  const $selectedRow = $(event.currentTarget);
                  this.addProductToSelection($selectedRow);
                  this.$productTableContainer.hide();
                  this.$searchInput.val('').focus();
              },

              handleBarcodeScan(barcode) {
                  if (/^\d+$/.test(barcode)) {
                      console.log(`Scanned barcode: ${barcode}`);
                      this.getProductAndAddRow(barcode);
                      this.$searchInput.val('').focus();
                  } else {
                      console.log('Invalid barcode:', barcode);
                      alert('Invalid barcode scanned');
                  }
              },

              getProductAndAddRow(productCode) {
                  if (!productCode || productCode.trim() === '') {
                      console.log('Empty product code, not fetching product');
                      return;
                  }

                  $.ajax({
                      url: `/api-bulk/SearchByCode/${productCode}`,
                      type: 'GET',
                      success: (data) => {
                          if (data && data.productCode) {
                              this.addProductToRow(data.productCode, data.productName, data.productPrice, data.tax);
                          } else {
                              console.error('Invalid product data received');

                          }
                      },
                      error: (error) => {
                          console.error('Error:', error);
                          console.log('Product not found or error occurred.');
                      }
                  });
              },

              addProductToSelection($productRow) {
                  const productCode = $productRow.find('td:nth-child(1)').text();
                  const productName = $productRow.find('td:nth-child(2)').text();
                  const productPrice = parseFloat($productRow.find('td:nth-child(4)').text()) || 0;
                  const unitTax = parseFloat($productRow.find('td:nth-child(5)').text()) || 0;

                  this.addProductToRow(productCode, productName, productPrice, unitTax);
              },

              addProductToRow(productCode, productName, productPrice, unitTax) {
                  const $existingRow = this.$selectedProductsTable.find(`tbody tr[data-product-code="${productCode}"]`);

                  if ($existingRow.length) {
                      const $qtyInput = $existingRow.find('.product-input');
                      $qtyInput.val(parseInt($qtyInput.val()) + 1).trigger('input');
                  } else {
                      const newRow = `
                    <tr data-product-code="${productCode}">
                        <td key-id="productCode">${productCode}</td>
                        <td key-id="productName">${productName}</td>
                        <td key-id="productQty">
                            <div class="input-group qty">
                                <div class="input-group-prepend">
                                    <button class="btn btn-danger btn-xs decrease-qty"><i class="fa fa-minus fa-sm"></i></button>
                                </div>
                                <input type="text" class="form-control form-control-xs text-center product-input" value="1" style="width: 50px; margin:auto; border: none" />
                                <div class="input-group-append">
                                    <button class="btn btn-success btn-xs increase-qty"><i class="fa fa-plus fa-sm"></i></button>
                                </div>
                                <div class="input-group-append ml-2">
                                    <button class="btn btn-danger btn-xs remove-row"><i class="fa fa-trash fa-sm"></i></button>
                                </div>
                            </div>
                        </td>
                        <td key-id="SalePrice">${this.formatNumber(productPrice)}</td>
                        <td key-id="unitTax">${this.formatNumber(unitTax)}</td>
                        <td key-id="discount">0.00</td>
                        <td key-id="finalTax">${this.formatNumber(unitTax)}</td>
                        <td key-id="subtotal">${this.formatNumber(productPrice + unitTax)}</td>
                    </tr>
                `;

                      this.$selectedProductsTable.find('tbody').prepend(newRow);
                      this.updateRowTotals(this.$selectedProductsTable.find(`tbody tr[data-product-code="${productCode}"]`));
                  }

                  this.updateSidebar();
              },

              handleQuantityChange(event) {
                  const $input = $(event.target);
                  const $row = $input.closest('tr');
                  let qty = parseInt($input.val());

                  if (isNaN(qty) || qty < 0) {
                      qty = 1;
                  }

                  $input.val(qty);

                  if (qty === 0) {
                      this.removeRow($row);
                  } else {
                      this.updateRowTotals($row);
                      this.updateSidebar();
                  }
              },

              handleQuantityAdjust($button, increment) {
                  const $input = $button.closest('.qty').find('.product-input');
                  let qty = parseInt($input.val()) + increment;
                  qty = Math.max(0, qty);
                  $input.val(qty).trigger('input');
              },

              updateRowTotals($row) {
                  const qty = parseInt($row.find('.product-input').val()) || 0;
                  const price = parseFloat($row.find('[key-id="SalePrice"]').text()) || 0;
                  const discount = parseFloat($row.find('[key-id="discount"]').text()) || 0;
                  const unitTax = parseFloat($row.find('[key-id="unitTax"]').text()) || 0;

                  const finalTax = unitTax * qty;
                  const subtotal = this.calculateSubtotal(price, qty, discount, unitTax);

                  $row.find('[key-id="finalTax"]').text(this.formatNumber(finalTax));
                  $row.find('[key-id="subtotal"]').text(this.formatNumber(subtotal));
              },

              updateSidebar() {
                  let subtotal = 0;
                  let tax = 0;
                  let discount = 0;

                  this.$selectedProductsTable.find('tbody tr').each(function() {
                      const qty = parseInt($(this).find('.product-input').val()) || 0;
                      const finalTax = parseFloat($(this).find('[key-id="finalTax"]').text()) || 0;
                      const productDiscount = parseFloat($(this).find('[key-id="discount"]').text()) || 0;
                      const subTotalItem = parseFloat($(this).find('[key-id="subtotal"]').text()) || 0;

                      subtotal += subTotalItem;
                      tax += finalTax;
                      discount += productDiscount * qty;
                  });

                  const totalAmount = subtotal + tax;
                  const receivedAmount = parseFloat(this.$receivedAmount.val()) || 0;
                  const change = receivedAmount - totalAmount;

                  $('#subtotal').text(this.formatNumber(subtotal));
                  $('#tax').text(this.formatNumber(tax));
                  $('#discount').text(this.formatNumber(discount));
                  $('#totalAmount').text(this.formatNumber(totalAmount));
                  $('#change-balance').text(this.formatNumber(change));
              },

              removeRow($row) {
                  $row.remove();
                  this.updateSidebar();
              },

              handleRowSelection(event) {
                  if (!$(event.target).is('button')) {
                      $('.btn-group').remove();
                      $('tr').removeClass('selected-row');
                      $(event.currentTarget).addClass('selected-row');

                      const $buttonGroup = $('<div>')
                          .addClass('btn-group')
                          .append(
                              $('<button>').attr('id', 'remove-button').addClass('btn btn-danger btn-xs').text('Remove')
                          );

                      const $cell = $(event.currentTarget).find('td:nth-child(2)');
                      $cell.addClass('cell-with-buttons').append($buttonGroup);
                  }
              },

              formatNumber: (num) => parseFloat(num).toFixed(2),
              calculateSubtotal: (price, qty, discount, tax) => (price * qty) - (discount * qty) + (tax * qty),
          };

          POS.init();

          // Error handling and logging
          window.onerror = function(message, source, lineno, colno, error) {
              console.error("An error occurred:", message, "at", source, ":", lineno, ":", colno);
              // You could also send this error to a logging service
          };

          // Periodic update to ensure consistency
          setInterval(() => POS.updateSidebar(), 5000);
      });
  </script>-->
